// Once updated to v2+ update rules to use the new keywords-spacing https://github.com/eslint/eslint/pull/4811/

{
	"parser": "babel-eslint",
	"extends": ["eslint-config-airbnb"],
	"env": {
		"browser": true,
		"node": true
	},
	"plugins": [
		"react",
		"babel"
	],
	"rules": {
		// Possible errors
		"comma-dangle": [2, "never"], //disallow or enforce trailing commas (recommended)
		"no-cond-assign": 2, //disallow assignment in conditional expressions (recommended)
		"no-console": 2, //disallow use of console in the node environment (recommended)
		"no-constant-condition": 2, //disallow use of constant expressions in conditions (recommended)
		"no-control-regex": 2, //disallow control characters in regular expressions (recommended)
		"no-debugger": 2, //disallow use of debugger (recommended)
		"no-dupe-args": 2, //disallow duplicate arguments in functions (recommended)
		"no-dupe-keys": 2, //disallow duplicate keys when creating object literals (recommended)
		"no-duplicate-case": 2, //disallow a duplicate case label. (recommended)
		"no-empty-character-class": 2, //disallow the use of empty character classes in regular expressions (recommended)
		"no-empty": 2, //disallow empty statements (recommended)
		"no-ex-assign": 2, //disallow assigning to the exception in a catch block (recommended)
		"no-extra-boolean-cast": 2, //disallow double-negation boolean casts in a boolean context (recommended)
		"no-extra-parens": 0, //disallow unnecessary parentheses
		"no-extra-semi": 2, //disallow unnecessary semicolons (recommended) (fixable)
		"no-func-assign": 2, //disallow overwriting functions written as function declarations (recommended)
		"no-inner-declarations": 2, //disallow function or variable declarations in nested blocks (recommended)
		"no-invalid-regexp": 2, //disallow invalid regular expression strings in the RegExp constructor (recommended)
		"no-irregular-whitespace": 2, //disallow irregular whitespace outside of strings and comments (recommended)
		"no-negated-in-lhs": 2, //disallow negation of the left operand of an in expression (recommended)
		"no-obj-calls": 2, //disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
		"no-regex-spaces": 2, //disallow multiple spaces in a regular expression literal (recommended)
		"no-sparse-arrays": 2, //disallow sparse arrays (recommended)
		"no-unexpected-multiline": 2, //Avoid code that looks like two expressions but is actually one
		"no-unreachable": 2, //disallow unreachable statements after a return, throw, continue, or break statement (recommended)
		"use-isnan": 2, //disallow comparisons with the value NaN (recommended)
		"valid-jsdoc": 2, //Ensure JSDoc comments are valid
		"valid-typeof": 2, //Ensure that the results of typeof are compared against a valid string (recommended)
		"no-tabs": 0,

		// Best practices
		"accessor-pairs": 2, //Enforces getter/setter pairs in objects
		"block-scoped-var": 2, //treat var statements as if they were block scoped
		"complexity": 2, //specify the maximum cyclomatic complexity allowed in a program
		"consistent-return": 2, //require return statements to either always or never specify values
		"curly": 2, //specify curly brace conventions for all control statements
		"default-case": 2, //require default case in switch statements
		"dot-location": [2, "property"], //enforces consistent newlines before or after dots
		"dot-notation": 2, //encourages use of dot notation whenever possible
		"eqeqeq": [2, "allow-null"], //require the use of === and !== (fixable)
		"guard-for-in": 2, //make sure for-in loops have an if statement
		"no-alert": 2, //disallow the use of alert, confirm, and prompt
		"no-caller": 2, //disallow use of arguments.caller or arguments.callee
		"no-case-declarations": 2, //disallow lexical declarations in case clauses
		"no-div-regex": 2, //disallow division operators explicitly at beginning of regular expression
		"no-else-return": 2, //disallow else after a return in an if
		"no-empty-pattern": 2, //disallow use of empty destructuring patterns
		"no-eq-null": 2, //disallow comparisons to null without a type-checking operator
		"no-eval": 2, //disallow use of eval()
		"no-extend-native": 2, //disallow adding to native types
		"no-extra-bind": 2, //disallow unnecessary function binding
		"no-fallthrough": 2, //disallow fallthrough of case statements (recommended)
		"no-floating-decimal": 2, //disallow the use of leading or trailing decimal points in numeric literals
		"no-implicit-coercion": 2, //disallow the type conversions with shorter notations
		"no-implied-eval": 2, //disallow use of eval()-like methods
		"no-invalid-this": 2, //disallow this keywords outside of classes or class-like objects
		"no-iterator": 2, //disallow usage of __iterator__ property
		"no-labels": 2, //disallow use of labeled statements
		"no-empty-label": 0, //deprecated - disabled to prevent deprecated warning,
		"no-lone-blocks": 2, //disallow unnecessary nested blocks
		"no-loop-func": 2, //disallow creation of functions within loops
		"no-magic-numbers": [1, {"ignore": [1, 0, -1]}], //disallow the use of magic numbers
		"no-multi-spaces": 2, //disallow use of multiple spaces (fixable)
		"no-multi-str": 2, //disallow use of multiline strings
		"no-native-reassign": 2, //disallow reassignments of native objects
		"no-new-func": 2, //disallow use of new operator for Function object
		"no-new-wrappers": 2, //disallows creating new instances of String,Number, and Boolean
		"no-new": 2, //disallow use of the new operator when not part of an assignment or comparison
		"no-octal-escape": 2, //disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		"no-octal": 2, //disallow use of octal literals (recommended)
		"no-param-reassign": 2, //disallow reassignment of function parameters
		"no-process-env": 2, //disallow use of process.env
		"no-proto": 2, //disallow usage of __proto__ property
		"no-redeclare": 2, //disallow declaring the same variable more than once (recommended)
		"no-return-assign": 2, //disallow use of assignment in return statement
		"no-script-url": 2, //disallow use of javascript: urls.
		"no-self-compare": 2, //disallow comparisons where both sides are exactly the same
		"no-sequences": 2, //disallow use of the comma operator
		"no-throw-literal": 2, //restrict what can be thrown as an exception
		"no-unused-expressions": 2, //disallow usage of expressions in statement position
		"no-useless-call": 2, //disallow unnecessary .call() and .apply()
		"no-useless-concat": 2, //disallow unnecessary concatenation of literals or template literals
		"no-void": 2, //disallow use of the void operator
		"no-warning-comments": 1, //disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
		"no-with": 2, //disallow use of the with statement
		"radix": 2, //require use of the second argument for parseInt()
		"vars-on-top": 0, //require declaration of all vars at the top of their containing scope
		"wrap-iife": 2, //require immediate function invocation to be wrapped in parentheses
		"yoda": 2, //require or disallow Yoda conditions

		// Strict Mode
		"strict": 2,
		
		// Variables
		"init-declarations": 2, //enforce or disallow variable initializations at definition
		"no-catch-shadow": 2, //disallow the catch clause parameter name being the same as a variable in the outer scope
		"no-delete-var": 2, //disallow deletion of variables (recommended)
		"no-shadow-restricted-names": 2, //disallow shadowing of names such as arguments
		"no-shadow": 2, //disallow declaration of variables already declared in the outer scope
		"no-undef-init": 2, //disallow use of undefined when initializing variables
		"no-undef": 2, //disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
		"no-undefined": 2, //disallow use of undefined variable
		"no-unused-vars": 2, //disallow declaration of variables that are not used in the code (recommended)
		"no-use-before-define": 2, //disallow use of variables before they are defined

		// Node.JS and CommonJS
		"callback-return": 0, //enforce return after a callback
		"global-require": 0, //enforce require() on top-level module scope
		"handle-callback-err": 0, //enforce error handling in callbacks
		"no-mixed-requires": 0, //disallow mixing regular variable and require declarations
		"no-new-require": 0, //disallow use of new operator with the require function
		"no-path-concat": 0, //disallow string concatenation with __dirname and __filename
		"no-process-exit": 0, //disallow process.exit()
		"no-restricted-modules": 0, //restrict usage of specified node modules
		"no-sync": 0, //disallow use of synchronous methods

		// Stylistic Issues
		"array-bracket-spacing": [1, "never"], //enforce spacing inside array brackets (fixable)
		"block-spacing": [2, "always"], //disallow or enforce spaces inside of single line blocks (fixable)
		"brace-style": [1, "1tbs", { "allowSingleLine": true}], //enforce one true brace style
		"camelcase": 1, //require camel case names
		"comma-spacing": 1, //enforce spacing before and after comma (fixable)
		"comma-style": [1, "last"], //enforce one true comma style
		"computed-property-spacing": [1, "never"], //require or disallow padding inside computed properties (fixable)
		"consistent-this": [1, "self"], //enforce consistent naming when capturing the current execution context
		"eol-last": 1, //enforce newline at the end of file, with no multiple empty lines (fixable)
		"func-names": 0, //require function expressions to have a name
		"func-style": 0, //enforce use of function declarations or expressions
		"id-length": 0, //this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
		"id-match": 0, //require identifiers to match the provided regular expression
		"indent": [1, "tab", {"SwitchCase": 1}], //specify tab or space width for your code (fixable)
		"jsx-quotes": [2, "prefer-double"], //specify whether double or single quotes should be used in JSX attributes
		"key-spacing": [1, {"beforeColon": false, "afterColon": true}], //enforce spacing between keys and values in object literal properties
		"linebreak-style": [1, "unix"], //disallow mixed 'LF' and 'CRLF' as linebreaks
		"lines-around-comment": [1, { "beforeBlockComment": true, "beforeLineComment": true, "allowBlockStart": true, "allowObjectStart": true }], //enforce empty lines around comments
		"max-depth": 1, //specify the maximum depth that blocks can be nested
		"max-len": 0, //specify the maximum length of a line in your program
		"max-nested-callbacks": [1, 5], //specify the maximum depth callbacks can be nested
		"max-params": [2, 4], //limits the number of parameters that can be used in the function declaration.
		"max-statements": [1, 20], //specify the maximum number of statement allowed in a function
		"new-cap": 2, //require a capital letter for constructors
		"new-parens": 2, //disallow the omission of parentheses when invoking a constructor with no arguments
		"newline-after-var": 0, //require or disallow an empty newline after variable declarations
		"no-array-constructor": 2, //disallow use of the Array constructor
		"no-bitwise": 1, //disallow use of bitwise operators
		"no-continue": 1, //disallow use of the continue statement
		"no-inline-comments": 0, //disallow comments inline after code
		"no-lonely-if": 0, //disallow if as the only statement in an else block
		"no-mixed-spaces-and-tabs": 2, //disallow mixed spaces and tabs for indentation (recommended)
		"no-multiple-empty-lines": 1, //disallow multiple empty lines
		"no-negated-condition": 0, //disallow negated conditions
		"no-nested-ternary": 2, //disallow nested ternary expressions
		"no-new-object": 0, //disallow the use of the Object constructor
		"no-plusplus": 0, //disallow use of unary operators, ++ and --
		"no-restricted-syntax": 0, //disallow use of certain syntax in code
		"no-spaced-func": 2, //disallow space between function identifier and application (fixable)
		"no-ternary": 0, //disallow the use of ternary operators
		"no-trailing-spaces": 2, //disallow trailing whitespace at the end of lines (fixable)
		"no-underscore-dangle": 0, //disallow dangling underscores in identifiers
		"no-unneeded-ternary": 2, //disallow the use of ternary operators when a simpler alternative exists
		"object-curly-spacing": 0, //require or disallow padding inside curly braces (fixable)
		"one-var": [2, { "initialized": "never" }], //require or disallow one variable declaration per function
		"operator-assignment": [1, "always"], //require assignment operator shorthand where possible or prohibit it entirely
		"operator-linebreak": [1, "before"], //enforce operators to be placed before or after line breaks
		"padded-blocks": 0, //enforce padding within blocks
		"quote-props": [1, "consistent-as-needed"], //require quotes around object literal property names
		"quotes": [2, 'single', 'avoid-escape'], //specify whether backticks, double or single quotes should be used (fixable)
		"require-jsdoc": 2, //Require JSDoc comment
		"semi-spacing": [1, {"before": false, "after": true}], //enforce spacing before and after semicolons
		"semi": 2, //require or disallow use of semicolons instead of ASI (fixable)
		"sort-vars": 0, //sort variables within the same declaration block
		"space-after-keywords": 0, //require a space after certain keywords (fixable)
		"space-before-blocks": 2, //require or disallow a space before blocks (fixable)
		"space-before-function-paren": 0, //require or disallow a space before function opening parenthesis (fixable)
		"space-before-keywords": 0, //require a space before certain keywords (fixable)
		"space-in-parens": 0, //require or disallow spaces inside parentheses
		"space-infix-ops": 0, //require spaces around operators (fixable)
		"space-return-throw-case": 0, //require a space after return, throw, and case (fixable)
		"space-unary-ops": 0, //require or disallow spaces before/after unary operators (fixable)
		"spaced-comment": 0, //require or disallow a space immediately following the // or /* in a comment
		"wrap-regex": 0, //require regex literals to be wrapped in parentheses
		"keyword-spacing": [2, {"before": true, "after": true, "overrides": {
			"if": {"after": false},
			"for": {"after": false},
			"while": {"after": false}
		} }],


		// ECMAScript 6
		"arrow-body-style": 2, //require braces in arrow function body
		"arrow-parens": 2, //require parens in arrow function arguments
		"arrow-spacing": 2, //require space before/after arrow function's arrow (fixable)
		"constructor-super": 2, //verify calls of super() in constructors
		"generator-star-spacing": 2, //enforce spacing around the * in generator functions (fixable)
		"no-confusing-arrow": 2, //Disallow arrow functions where they could be confused with comparisons
		"no-class-assign": 2, //disallow modifying variables of class declarations
		"no-const-assign": 2, //disallow modifying variables that are declared using const
		"no-dupe-class-members": 2, //disallow duplicate name in class members
		"no-this-before-super": 2, //disallow use of this/super before calling super() in constructors.
		"no-var": 2, //require let or const instead of var
		"object-shorthand": 2, //require method and property shorthand syntax for object literals
		"prefer-arrow-callback": 2, //suggest using arrow functions as callbacks
		"prefer-const": 1, //suggest using const declaration for variables that are never modified after declared
		"prefer-reflect": 2, //suggest using Reflect methods where applicable
		"prefer-spread": 2, //suggest using the spread operator instead of .apply().
		"prefer-template": 2, //suggest using template literals instead of strings concatenation
		"require-yield": 2, //disallow generator functions that do not have yield

		// Import
		"import/no-unresolved": 1, //Ensure imports point to a file/module that can be resolved.
		"import/named": 1, //Ensure named imports correspond to a named export in the remote file.
		"import/default": 1, //Ensure a default export is present, given a default import.
		"import/namespace": 1, //Ensure imported namespaces contain dereferenced properties as they are dereferenced.
		"import/no-restricted-paths": 1, //Restrict which files can be imported in a given folder
		//Helpful warnings:
		"import/export": 1, //Report any invalid exports, i.e. re-export of the same name
		"import/no-named-as-default": 1, //Report use of exported name as identifier of default export
		"import/no-named-as-default-member": 1, //Report use of exported name as property of default export
		"import/no-deprecated": 1, //Report imported names marked with @deprecated documentation tag
		"import/no-extraneous-dependencies": 0,	//Forbid the use of extraneous packages - Disabled pending https://github.com/benmosher/eslint-plugin-import/issues/458
		"import/no-mutable-exports": 1, //Forbid the use of mutable exports with var or let.
		//Module systems:
		"import/no-commonjs": 1, //Report CommonJS require calls and module.exports or exports.*.
		"import/no-amd": 1, //Report AMD require and define calls.
		"import/no-nodejs-modules": 1, //No Node.js builtin modules.
		//Style guide:
		"import/imports-first": 1, //Ensure all imports appear before other statements
		"import/no-duplicates": 1, //Report repeated import of the same module in multiple places
		"import/no-namespace": 1, //Report namespace imports
		"import/extensions": [1, {"js": "never"}], //Ensure consistent use of file extension within the import path
		"import/order": 1, //Enforce a convention in module import order
		"import/newline-after-import": 1, //Enforce a newline after import statements
		"import/prefer-default-export": 1, //Prefer a default export if module exports a single name

		// React
		"react/jsx-quotes": 0,
		"react/jsx-indent": [1, "tab"],
		"react/jsx-indent-props": [1, "tab"],
		"react/jsx-boolean-value": 2,
		"react/jsx-no-duplicate-props": 2,
		"react/no-unused-prop-types": 0, // This rule isn't clever enough to follow variables passed to functions so gives heaps of false positives
		"react/sort-comp": 0,
		"react/prop-types": [2, { "ignore": [
			"children",
			"className",
			"style",
			"bsStyle",
			"bsClass",
			"bsSize"
			]
		}],

		// Babel
		"babel/new-cap": 2,
//		"babel/array-bracket-spacing": 2,
		"babel/object-curly-spacing": 2,
		"no-await-in-loop": 2
	}
}
